'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = normalizeHTML;

var _SpacerMarkSpec = require('./SpacerMarkSpec');

var _patchAnchorElements = require('./patchAnchorElements');

var _patchAnchorElements2 = _interopRequireDefault(_patchAnchorElements);

var _patchBreakElements = require('./patchBreakElements');

var _patchBreakElements2 = _interopRequireDefault(_patchBreakElements);

var _patchElementInlineStyles = require('./patchElementInlineStyles');

var _patchElementInlineStyles2 = _interopRequireDefault(_patchElementInlineStyles);

var _patchListElements = require('./patchListElements');

var _patchListElements2 = _interopRequireDefault(_patchListElements);

var _patchMathElements = require('./patchMathElements');

var _patchMathElements2 = _interopRequireDefault(_patchMathElements);

var _patchParagraphElements = require('./patchParagraphElements');

var _patchParagraphElements2 = _interopRequireDefault(_patchParagraphElements);

var _patchStyleElements = require('./patchStyleElements');

var _patchStyleElements2 = _interopRequireDefault(_patchStyleElements);

var _patchTableElements = require('./patchTableElements');

var _patchTableElements2 = _interopRequireDefault(_patchTableElements);

var _toSafeHTMLDocument = require('./toSafeHTMLDocument');

var _toSafeHTMLDocument2 = _interopRequireDefault(_toSafeHTMLDocument);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var HTML_BODY_PATTERN = /<body[\s>]/i;
var LONG_UNDERLINE_PATTERN = /_+/g;

// This is a workround to convert "&nbsp;&nbsp;......&nbsp;" into wider tab
// tab spacers. For every 6 "&nbsp;", they will be converted into tab spacers.
var LONG_TAB_SPACE_PATTERN = /(\&nbsp;){6}/g;

var TAB_SPACER_HTML = new Array(6).join('<span ' + _SpacerMarkSpec.DOM_ATTRIBUTE_SIZE + '="' + _SpacerMarkSpec.SPACER_SIZE_TAB + '">' + _SpacerMarkSpec.HAIR_SPACE_CHAR + '</span>');

function replaceNOBR(matched) {
  // This is a workround to convert "_______" into none-wrapped text
  // that apppears like a horizontal line.
  if (matched && matched.length >= 20) {
    // needs extra space after it so user can escape the <nobr />.
    matched = '<nobr>' + String(matched) + '</nobr> ';
  }
  return matched;
}

function normalizeHTML(html) {
  var body = null;

  var sourceIsPage = HTML_BODY_PATTERN.test(html);
  html = html.replace(LONG_UNDERLINE_PATTERN, replaceNOBR);

  // Convert every two consecutive "&nbsp;" into a spacer tab.
  html = html.replace(LONG_TAB_SPACE_PATTERN, TAB_SPACER_HTML);
  var doc = (0, _toSafeHTMLDocument2.default)(html);
  if (doc) {
    // styles.
    (0, _patchStyleElements2.default)(doc);
    (0, _patchElementInlineStyles2.default)(doc);
    // contents.
    (0, _patchAnchorElements2.default)(doc);
    (0, _patchBreakElements2.default)(doc);
    (0, _patchListElements2.default)(doc);
    (0, _patchParagraphElements2.default)(doc);
    (0, _patchTableElements2.default)(doc);
    (0, _patchMathElements2.default)(doc);
    body = doc.getElementsByTagName('body')[0];

    if (body && sourceIsPage) {
      // Source HTML contains <body />, assumes this to be a complete
      // page HTML. Assume this <body /> may contain the style that indicates
      // page's layout.
      var frag = doc.createElement('html');
      frag.appendChild(body);
      return frag.innerHTML;
    }
  }

  if (!body) {
    // <body /> should alway be generated by doc.
    return 'Unsupported HTML content';
  }

  // HTML snippet only.
  return '<body>' + body.innerHTML + '</body>';
}